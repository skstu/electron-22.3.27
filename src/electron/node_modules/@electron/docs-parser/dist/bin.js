#!/usr/bin/env node
"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs-extra"));
const minimist_1 = __importDefault(require("minimist"));
const ora_1 = __importDefault(require("ora"));
const path = __importStar(require("path"));
const pretty_ms_1 = __importDefault(require("pretty-ms"));
const _1 = require(".");
const chalk_1 = __importDefault(require("chalk"));
const args = minimist_1.default(process.argv, {
    default: {
        packageMode: 'single',
    },
});
const { dir, outDir, useReadme, packageMode, moduleVersion, help } = args;
if (!['single', 'multi'].includes(packageMode)) {
    console.error(chalk_1.default.red('packageMode must be one of "single" and "multi"'));
    process.exit(1);
}
if (help) {
    console.info(chalk_1.default.cyan('Usage: electron-docs-parser --dir ../electron [--out-dir ../electron-out]'));
    process.exit(0);
}
const runner = ora_1.default(chalk_1.default.yellow('Checking argv')).start();
if (typeof dir !== 'string') {
    runner.fail(chalk_1.default.red('Missing required --dir argument.  "--dir ../electron"'));
    process.exit(1);
}
if (typeof moduleVersion !== 'string') {
    runner.fail(chalk_1.default.red('Missing required --moduleVersion argument.  "--moduleVersion 1.2.3"'));
    process.exit(1);
}
const resolvedDir = path.isAbsolute(dir) ? dir : path.resolve(process.cwd(), dir);
if (!fs.pathExistsSync(resolvedDir)) {
    runner.fail(`${chalk_1.default.red('Resolved directory does not exist:')} ${chalk_1.default.cyan(resolvedDir)}`);
    process.exit(1);
}
const resolvedOutDir = typeof outDir === 'string'
    ? path.isAbsolute(outDir)
        ? outDir
        : path.resolve(process.cwd(), outDir)
    : process.cwd();
runner.text = chalk_1.default.cyan(`Generating API in directory: ${chalk_1.default.yellow(`"${resolvedOutDir}"`)}`);
const start = Date.now();
fs.mkdirp(resolvedOutDir).then(() => _1.parseDocs({
    useReadme: useReadme ? true : false,
    baseDirectory: resolvedDir,
    moduleVersion,
    packageMode,
})
    .then(data => fs.writeJson(path.resolve(resolvedOutDir, './electron-api.json'), data, {
    spaces: 2,
}))
    .then(() => runner.succeed(`${chalk_1.default.green('Electron API generated in')} ${chalk_1.default.yellow(`"${resolvedOutDir}"`)} took ${chalk_1.default.cyan(pretty_ms_1.default(Date.now() - start))}`))
    .catch(err => {
    runner.fail();
    console.error(err);
    process.exit(1);
}));
//# sourceMappingURL=bin.js.map