"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
const DocsParser_1 = require("./DocsParser");
function parseDocs(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const packageMode = options.packageMode || 'single';
        const apiDocsPath = path.resolve(options.baseDirectory, 'docs', 'api');
        const structuresPath = path.resolve(apiDocsPath, 'structures');
        let structures = [];
        let apis = [];
        if (options.useReadme) {
            const readmePath = path.resolve(options.baseDirectory, 'README.md');
            if (!fs.existsSync(readmePath)) {
                throw new Error('README.md file not found');
            }
            apis = [readmePath];
        }
        else {
            structures = yield getAllMarkdownFiles(structuresPath);
            apis = yield getAllMarkdownFiles(apiDocsPath);
        }
        const parser = new DocsParser_1.DocsParser(options.baseDirectory, options.moduleVersion, apis, structures, packageMode);
        return yield parser.parse();
    });
}
exports.parseDocs = parseDocs;
function getAllMarkdownFiles(inDir) {
    return __awaiter(this, void 0, void 0, function* () {
        const allMarkdownFiles = [];
        const children = yield fs.readdir(inDir);
        for (const child of children) {
            const childPath = path.resolve(inDir, child);
            const stats = yield fs.stat(childPath);
            if (path.extname(childPath) === '.md' && stats.isFile()) {
                allMarkdownFiles.push(childPath);
            }
        }
        return allMarkdownFiles;
    });
}
__export(require("./ParsedDocumentation"));
//# sourceMappingURL=index.js.map