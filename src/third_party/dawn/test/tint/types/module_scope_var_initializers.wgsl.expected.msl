#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct S {
  float a;
};

kernel void tint_symbol() {
  thread bool tint_symbol_3 = false;
  thread int tint_symbol_4 = 0;
  thread uint tint_symbol_5 = 0u;
  thread float tint_symbol_6 = 0.0f;
  thread int2 tint_symbol_7 = int2(0);
  thread uint3 tint_symbol_8 = uint3(0u);
  thread float4 tint_symbol_9 = float4(0.0f);
  thread float2x3 tint_symbol_10 = float2x3(float3(0.0f), float3(0.0f));
  thread tint_array<float, 4> tint_symbol_11 = tint_array<float, 4>{};
  thread S tint_symbol_12 = S{};
  tint_symbol_3 = false;
  tint_symbol_4 = 0;
  tint_symbol_5 = 0u;
  tint_symbol_6 = 0.0f;
  tint_symbol_7 = int2(0);
  tint_symbol_8 = uint3(0u);
  tint_symbol_9 = float4(0.0f);
  tint_symbol_10 = float2x3(float3(0.0f), float3(0.0f));
  tint_array<float, 4> const tint_symbol_1 = tint_array<float, 4>{};
  tint_symbol_11 = tint_symbol_1;
  S const tint_symbol_2 = S{};
  tint_symbol_12 = tint_symbol_2;
  return;
}

