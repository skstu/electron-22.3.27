#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct Uniforms {
  /* 0x0000 */ uint i;
};

struct OuterS {
  tint_array<uint, 8> a1;
};

uint f(uint i) {
  return (i + 1u);
}

kernel void tint_symbol(const constant Uniforms* tint_symbol_2 [[buffer(0)]]) {
  OuterS s1 = {};
  float3 v = 0.0f;
  v[s1.a1[(*(tint_symbol_2)).i]] = 1.0f;
  uint const tint_symbol_1 = f(s1.a1[(*(tint_symbol_2)).i]);
  v[tint_symbol_1] = 1.0f;
  return;
}

